plugins {
	id 'sherdsapi-common'
	id 'net.neoforged.moddev' version "${mdg_version}"
}


neoForge {
	neoFormVersion = "${minecraft_version}-${neoform_version}"

	parchment {
		minecraftVersion = parchment_minecraft_version
		mappingsVersion = parchment_version
	}
}

@CacheableRule
abstract class MakeLibraryLenient implements ComponentMetadataRule {
	final String targetGroup
	final Set<String> targetModule

	@javax.inject.Inject MakeLibraryLenient(String targetGroup, Collection<String> targetModule) {
		this.targetGroup = targetGroup
		this.targetModule = Set.copyOf(targetModule)
	}

	void execute(ComponentMetadataContext context) {
		context.details.allVariants {
			it.withDependencies {
				it.each {
					if (it.group == targetGroup && targetModule.contains(it.name)) {
						it.version {
							it.require(it.strictVersion)
							it.strictly("+")
						}
					}
				}
			}
		}
	}
}

dependencies {
	compileOnly group:'net.fabricmc', name:'sponge-mixin', version:mixin_version
	implementation "io.github.llamalad7:mixinextras-common:${mixinextras_version}"
	components {
		withModule("net.neoforged:minecraft-dependencies", MakeLibraryLenient) {
			params("org.ow2.asm", ["asm", "asm-tree", "asm-commons", "asm-util"])
		}
	}
	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

	implementation("dev.thomasglasser.tommylib:tommylib-common-${minecraft_version}:${tommylib_version}") {
		transitive = false
	}
}

configurations {
	commonJava {
		canBeResolved = false
		canBeConsumed = true
	}
	commonResources {
		canBeResolved = false
		canBeConsumed = true
	}
}

artifacts {
	commonJava sourceSets.main.java.sourceDirectories.singleFile
	sourceSets.main.resources.sourceDirectories.files.each {
		commonResources it
	}
}