plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.139'
    id 'java-library'
}

subsystems {
    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_version
    }
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

jarJar.enable()

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")

    jarJar implementation("dev.thomasglasser.tommylib:tommylib-neoforge-${minecraft_version}:${tommylib_version}")

    // Runtime
    localRuntime "maven.modrinth:jade:${jade_version}+neoforge"
    localRuntime "mezz.jei:jei-${previous_minecraft_version}-neoforge:${jei_version}"
    localRuntime "me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

jar {
    archiveClassifier = 'slim'
}

tasks.named('jarJar') {
    archiveClassifier = ''
}

configurations.runtimeElements.artifacts.clear()
artifacts {
    runtimeElements(tasks.jarJar) {
        builtBy tasks.jarJar
    }
}