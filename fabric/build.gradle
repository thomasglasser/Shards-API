plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'sherdsapi-loader'
}
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

	include modImplementation("dev.thomasglasser.tommylib:tommylib-fabric-${minecraft_version}:${tommylib_version}") {
		transitive = false
	}

	// Runtime
	modLocalRuntime "com.terraformersmc:modmenu:${modmenu_version}"
	modLocalRuntime "maven.modrinth:jade:${jade_version}+fabric"
	modLocalRuntime "mezz.jei:jei-${previous_minecraft_version}-fabric:${jei_version}"
//	modLocalRuntime "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
}

loom {
	def aw = file("src/main/resources/${mod_id}.accesswidener")
	if (aw.exists()) {
		accessWidenerPath.set(aw)
	}

	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("runs/client")
		}
		client_alt {
			client()
			setConfigName("Fabric Client 2")
			ideConfigGenerated(true)
			runDir("runs/client_alt")
		}
		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("runs/server")
		}
		data {
			inherit client
			setConfigName("Fabric Data Generation")
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file('src/generated/resources/')}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir("runs/data")
		}
	}

	mixin {
		add sourceSets.main, "${mod_id}.refmap.json"
	}
}